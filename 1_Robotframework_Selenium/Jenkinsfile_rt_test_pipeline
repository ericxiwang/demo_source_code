pipeline {
    agent any
    parameters{
        string(defaultValue: 'http://flask-example:8080',  name: 'FLASK_CLOUD_URL', trim: true)
        choice(name: 'TAG', choices: ['all', 'sort', 'list_operation', 'data_validator','data_query'], description: 'Choose an API test tag')
     }
    stages{
        stage('test start here'){
            steps{
                echo 'robotframework test suite start'
            }
        }

        stage('Get code from Github') {
            steps{
            checkout(
                    [$class: 'GitSCM', branches: [[name: '*/main']],
                     doGenerateSubmoduleConfigurations: false,
                     extensions: [],
                     submoduleCfg: [],
                     userRemoteConfigs: [[url: 'https://github.com/ericxiwang/demo_source_code.git']]]
            )
            sh 'exit 0'
            }
        }
        stage('execute web page auto test'){
            steps{

                 catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
                 {
                    sh "robot --report page_test.html -v FLASK_CLOUD_URL:${params.FLASK_CLOUD_URL} ./1_Robotframework_Selenium/page_auto_test.robot"
                 }

            }
        }
        stage('execute api auto test'){
            steps{

                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
                {
                    dir("${WORKSPACE}"+"/"+"1_Robotframework_Selenium")
                    {
                        script
                            {
                                if (params.TAG == 'all')
                                {
                                    sh "robot --report api_test.html -v FLASK_CLOUD_URL:${params.FLASK_CLOUD_URL} api_auto_test.robot"
                                }
                                else
                                {
                                    sh "robot --report api_test.html -v FLASK_CLOUD_URL:${params.FLASK_CLOUD_URL} -i ${params.TAG} -i init api_auto_test.robot"
                                }
                            }
                    }
                }
            }
        }

    }
    post {
        always {
            robot outputPath: '.', passThreshold: 80.0, unstableThreshold: 70.0
            archiveArtifacts artifacts: '*.html', fingerprint: true
            archiveArtifacts artifacts: '1_Robotframework_Selenium/*.html', fingerprint: true

        } }

}
